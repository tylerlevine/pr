#!/usr/bin/env bash

bgaccept() {
	local opts push=1 GETOPT UPSTREAM
	GETOPT=$(command -v gnu-getopt || command -v getopt)
	opts="$($GETOPT -o hn -l help,nopush -n "$PROGRAM" -- "$@")";
	eval set -- "$opts"
	while true; do case $1 in
		-h|--help) usage add; exit 0 ;;
		-n|--no-push) push=0; shift ;;
		--) shift; break ;;
	esac done

	BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"

	read -r -p "Are you sure you want to accept changes made on the $BRANCH_NAME branch? [yN]" should_accept
	if [[ ! "$should_accept" =~ ^[yY]$ ]]; then
		echo "Aborted: changes not accepted"
		exit 1
	fi

	echo -n "Accepting changes and creating signed review tag..."
	REVIEWER_EMAIL="$(git config user.email)"
	TAG_NAME="reviewed-by-$REVIEWER_EMAIL-$(git rev-parse --short HEAD)"
	git tag --sign -m "Changes on this branch were reviewed and accepted by the creator of this tag" "$TAG_NAME"
	echo "OK"

	if [[ "$push" != 0 ]]; then
		echo -n "Pushing signed review tag to upstream repository..."
		git push origin "$TAG_NAME" >/dev/null 2>&1
		echo "OK"
	fi
}

bgmerge() {
	UPSTREAM=master # this is the branch commits will be merged into
	BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
	MIN_REVIEWS=1

	# make sure tip of merged branch has at least one signed tag
	local valid_signed_tags=0
	FORMAT_SCRIPT="%(if:notequals=<$(git config user.email)>)%(taggeremail)%(then)v%(end)"
	valid_signed_tags=$(git for-each-ref \
		--points-at "$BRANCH_NAME" \
		--format "$FORMAT_SCRIPT" \
		refs/tags | grep -c v \
	)

	if [[ "$valid_signed_tags" -lt "$MIN_REVIEWS" ]]; then
		echo "Error: Failed to find enough signed review tags to satisfy minimum review requirement."
		echo "Error: $valid_signed_tags reviews were found, but $MIN_REVIEWS are required"
		exit 1
	fi

	echo "Merging branch $BRANCH_NAME into origin/$UPSTREAM..."
	git checkout "$UPSTREAM"
	git pull origin "$UPSTREAM" # tap 1
	git merge --no-ff "$BRANCH_NAME" # tap 2
	git push origin "$UPSTREAM" ":$BRANCH_NAME" # tap 3
	git branch -D "$BRANCH_NAME"
}
