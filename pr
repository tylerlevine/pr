#!/usr/bin/env bash

set -e
set -u
set -o pipefail

VERSION="v0.1.0"
PROGRAM="${0##*/}"
COMMAND="${1:-usage}"
UPSTREAM=master

GETOPT=$(command -v gnu-getopt || command -v getopt)
PR_TEMPLATE="$(cat <<-EOF
{title}

# Summary
{summary}

## Reviewers:

## Labels:
EOF
)"

main(){
	case $COMMAND in
		""|"-h"|"--help"|"help"|"usage") usage; exit 0;;
		"-v"|"--version") cmd_version; exit 0;;
	esac

	! type "cmd_$COMMAND" > /dev/null && usage

	shift;
	"cmd_$COMMAND" "$@"
}

usage() {
	topic="${1:-}"
	case $topic in

		"" ) cat <<-EOF
		pr <command> [<args>]

		Commands
		--------

		* pr sync
			Create or update a github pull request from a branch

		* pr merge
			Merge a github pull request which has been accepted

		* pr accept
			Accept a github pull request and apply review signature

		* pr show
			Show review signatures for the current HEAD

		* pr verify
			Verify that the current HEAD has at least the minimum number of valid review tags

		* pr version
			Report the version number
		EOF
		;;

	"sync" ) cat <<-EOF
		pr sync

		Setup your repository for usage with pr

		TODO: detailed command usage
		EOF
		;;

	"accept" ) cat <<-EOF
		pr accept

		Accept a github pull request and apply review signature

		TODO: detailed command usage
		EOF
		;;

	"merge" ) cat <<-EOF
		pr merge [options]

		Merge a github pull request which has been accepted

		TODO: detailed command usage
		EOF
		;;

	"show" ) cat <<-EOF
		pr show [options]

		Show review signature tags for the current HEAD

		TODO: detailed command usage
		EOF
		;;

	"verify" ) cat <<-EOF
		pr verify

		Verify that the current HEAD has at least a minimum number of valid review tags

		TODO: detailed command usage
		EOF
		;;

	"version" ) cat <<-EOF
		pr version

		Print current version.
		EOF
		;;

	esac
}

mark_pr_accepted() {
	COMMIT="$1"
	URL="$2"
	USER="$(grep user "$HOME/.config/hub" | cut -d' ' -f3)"
	TOKEN="$(grep token "$HOME/.config/hub" | cut -d' ' -f4)"
	PR_URL="$(sed -E 's/pull\/([0-9]+)/pulls\/\1\/reviews/ ; s/github\.com/api\.github\.com\/repos/' <<< "$URL")"
	BODY="$(printf '{"commit_id": "%s", "event": "APPROVE", "body": "Accepted via `%s %s`"}' "$COMMIT" "$PROGRAM" "$VERSION")"

	echo -n "Marking pull request as accepted..."

	if ! RESULT="$(curl -sfS \
	-H "Authorization: Bearer $TOKEN" \
	-H "Content-Type: application/json" \
	-H "Accept: application/json" \
	--data "$BODY" \
	"$PR_URL" 2>&1)"; then
		if echo "$RESULT" | grep '422 Unprocessable Entity' >/dev/null 2>&1; then
			printf "\\nerror: unable to accept own pull request\\n"
			exit 1
		fi
		printf "\\nEncountered error from github while attempting to mark pr accepted:\\n%s\\n" "$RESULT"
	else
		echo "OK"
	fi
}

cmd_accept() {
	local opts push=1 accept=1
	opts="$($GETOPT -o hnt -l help,nopush,tagonly -n "$PROGRAM" -- "$@")";
	eval set -- "$opts"
	while true; do case $1 in
		-h|--help) usage add; exit 0 ;;
		-n|--nopush) push=0; shift ;;
		-t|--tagonly) accept=0; shift ;;
		--) shift; break ;;
	esac done
	[ "$#" != 1 ] && usage accept && exit 1

	pr=${1}
	if [[ ! "$pr" =~ ^[0-9]+$ ]]; then
		echo "invalid pull request number: $pr"
		exit 1
	fi

	echo -n "Checking out pull request $pr..."
	RESULT=
	if r="$(hub pr checkout "$pr")"; then
		echo "OK"
	else
		echo "Error: checkout failed"
		echo "$r"
		exit 1
	fi

	PR_INFO="$(hub pr list -h "$(git rev-parse --abbrev-ref HEAD)" -f '%H %U' -s open -L 1)"
	BRANCH="$(cut -d' ' -f1 <<< "$PR_INFO")"
	COMMIT="$(git rev-parse "$BRANCH")"
	URL="$(cut -d' ' -f2 <<< "$PR_INFO")"
	echo -n "Fetching pull request $pr head branch $BRANCH..."
	git fetch origin "$BRANCH" > /dev/null 2>&1
	echo "OK"

	echo -n "Creating review tag..."
	REVIEWER_EMAIL="$(git config user.email)"
	TAG_NAME="reviews/$REVIEWER_EMAIL-$(git rev-parse --short HEAD)"
	git tag --sign -m "Changes on this branch were reviewed and accepted by the creator of this tag" "$TAG_NAME" "$COMMIT"
	echo "OK"

	[[ "$accept" == "0" ]] || { echo -n "Marking pull request $pr as accepted..."; mark_pr_accepted "$COMMIT" "$URL"; echo "OK"; }
	[[ "$push" == "0" ]] || { echo -n "Pushing review tag to origin..."; git push origin "$TAG_NAME" > /dev/null 2>&1; echo "OK"; }
}

cmd_show() {
	local opts raw=0
	opts="$($GETOPT -o hr -l help,raw -n "$PROGRAM" -- "$@")";
	eval set -- "$opts"
	while true; do case $1 in
		-h|--help) usage show; exit 0;;
		-r|--raw) raw=1; shift;;
		--) shift; break;;
	esac done
	[ "$#" -gt 1 ] && usage show && exit 1

	COMMIT="$(git rev-parse HEAD)"
	FORMAT_SCRIPT="%(if:notequals=<$(git config user.email)>)%(taggeremail)%(then)%(taggeremail): Valid Review Tag%(end)"

	valid_signed_tags="$(git for-each-ref \
		--points-at "$COMMIT" \
		--format "$FORMAT_SCRIPT" \
		refs/tags/reviews \
	)"
	if ! valid_count="$(grep -c "Valid Review Tag" <<< "$valid_signed_tags")"; then
		valid_count=0
	fi
	[[ "$raw" != 1 ]] && printf "$valid_count valid review tag(s) for commit %s\\n" "$COMMIT"
	[[ -n "$valid_signed_tags" ]] && echo "$valid_signed_tags"
}

update_pr() {
	BRANCH_NAME="$1"
	# already have a pr for this branch open
	echo "Branch $BRANCH_NAME already has one or more open pull requests"

	# is the local copy of the remote ref up to date?
	LOCAL_COMMIT_COUNT="$(git rev-list --count "$BRANCH_NAME")"
	REMOTE_COMMIT_COUNT="$(git rev-list --count "origin/$BRANCH_NAME")"
	COMMIT_DELTA=$(("$LOCAL_COMMIT_COUNT" - "$REMOTE_COMMIT_COUNT"))

	if [ "$COMMIT_DELTA" == "0" ]; then
		echo "Remote branch origin/$BRANCH_NAME is up to date, aborting"
		exit 1
	fi

	read -r -p "Would you like to update pull request #$PR_NUMBER? [y/N] " should_update

	if [[ "$should_update" =~ ^[yY]$ ]]; then
		echo "Updating pull request #$PR_NUMBER... "
		git push origin "$(git rev-parse --abbrev-ref HEAD)"
	else
		echo "Aborted: Pull request not updated"
		exit 1
	fi
}

create_pr() {
	BRANCH_NAME="$1"
	echo "Creating new PR for branch $BRANCH_NAME..."

	PR_MESSAGE_FILE=$(mktemp)
	HEAD_COMMIT_SUBJECT="$(git log --pretty='format:%s' -1)"
	HEAD_COMMIT_BODY="$(git log --pretty='format:%b' -1)"

	# replace PR template placeholders with actual data
	sed -e "s/{title}/${HEAD_COMMIT_SUBJECT:-''}/" -e "s/{summary}/${HEAD_COMMIT_BODY:-''}/" <<< "$PR_TEMPLATE" > "$PR_MESSAGE_FILE"
	${EDITOR:-vi} "$PR_MESSAGE_FILE"

	# extract reviewers, labels, and assignees
	if grep "Reviewers:" "$PR_MESSAGE_FILE" > /dev/null; then
		REVIEWERS="$(grep "Reviewers:" "$PR_MESSAGE_FILE" | cut -d':' -f2 | tr -d ' ')"
	fi

	if grep "Labels:" "$PR_MESSAGE_FILE" > /dev/null; then
		LABELS="$(grep "Labels:" "$PR_MESSAGE_FILE" | cut -d':' -f2 | tr -d ' ')"
	fi

	# if grep "Assignees:" "$PR_MESSAGE_FILE" > /dev/null; then
	# 	ASSIGNEES="$(grep "Assignees:" "$PR_MESSAGE_FILE" | cut -d':' -f2 | tr -d ' ')"
	# fi

	PR_CREATE_ARGS="-F $PR_MESSAGE_FILE -p"
	[ ! -z "$REVIEWERS" ] && PR_CREATE_ARGS="$PR_CREATE_ARGS -r $REVIEWERS"
	[ ! -z "$LABELS" ] && PR_CREATE_ARGS="$PR_CREATE_ARGS -l $LABELS"
	# [ ! -z "$ASSIGNEES" ] && PR_CREATE_ARGS="$PR_CREATE_ARGS -a $ASSIGNEES"

	# make sure all local commits are pushed up to origin
	if [ "$(git rev-parse "origin/$BRANCH_NAME" 2>&1 >/dev/null)" != "$(git rev-parse "$BRANCH_NAME")" ]; then
		echo "Updating out of date remote branch origin/$BRANCH_NAME..."
		git push origin "$BRANCH_NAME" > /dev/null 2>&1
	fi

	# shellcheck disable=SC2086
	PR_URL="$(hub pull-request $PR_CREATE_ARGS 2>&1 | grep 'https://' )"
	echo "Pull request successfully created: $PR_URL"
}

cmd_sync() {
	[ "$#" -eq 0 ] || { usage sync; exit 1; }

	BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
	[ "$BRANCH_NAME" == "$UPSTREAM" ] && echo "Error: Cannot create pull request with commits made directly on local copy of upstream branch $UPSTREAM" && exit 1
	PR_NUMBER="$(hub pr list -h "$BRANCH_NAME" -s open -f '%I' -L 1 2> /dev/null || echo -n 0)"

	# check for existing open pr for this branch
	if [ "${PR_NUMBER:-0}" -ge 1 ]; then
		update_pr "$BRANCH_NAME"
		exit 0
	fi

	echo "No open pull request found for local branch $BRANCH_NAME"
	read -r -p "Create a new pull request? [Y/n] " should_create

	if [[ "$should_create" =~ ^[Yy]$ || "$should_create" == '' ]]; then
		create_pr "$BRANCH_NAME"
	else
		echo "Aborted: pull request not created"
		exit 0
	fi
}

merge_pr() {
	BRANCH_NAME="$1"
	PR_NUMBER="$2"

	echo "Merging branch $BRANCH_NAME (pull request #$PR_NUMBER) into branch $UPSTREAM..."
	FIRST_BRANCH_COMMIT="$(git log "$UPSTREAM".."$BRANCH_NAME" -1 --pretty='format:%H')"
	git checkout "$UPSTREAM"
	git pull origin "$UPSTREAM" # 1 tap
	git merge --squash "$BRANCH_NAME"
	# reuse first commit message from feature branch, but allow editing before commit
	# TODO: better commit message for final commit in upstream
	git commit -c "$FIRST_BRANCH_COMMIT" # 2 tap
	git push origin "$UPSTREAM" ":$BRANCH_NAME" # 3 tap
	git branch -D "$BRANCH_NAME"
}

cmd_merge() {
	BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
	PR_NUMBER="$(hub pr list -h "$BRANCH_NAME" -s open -f '%I' -L 1)"

	if [[ "$PR_NUMBER" == "" ]]; then
		echo "Failed to find open pull request for branch $BRANCH_NAME"
		exit 1
	fi

	cmd_verify > /dev/null 2>&1

	# TODO: check ci status once github bot is functional
	# this should cover the following checks:
	# 1) lint status
	# 2) test status
	merge_pr "$BRANCH_NAME" "$PR_NUMBER"
}

cmd_verify() {
	local opts min_count=1
	opts="$($GETOPT -o hm: -l help,min-count: -n "$PROGRAM" -- "$@")";
	eval set -- "$opts"
	while true; do case $1 in
		-h|--help) usage verify; exit 0;;
		-m|--min-count) min_count="$2"; shift 2 ;;
		--) shift; break ;;
	esac done
	[ "$#" -gt 0 ] && usage verify && exit 1
	# make sure tip of merged branch has at least the minimum number of signed review tags
	local valid_signed_tags=0
	BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
	FORMAT_SCRIPT="%(if:notequals=<$(git config user.email)>)%(taggeremail)%(then)v%(end)"
	valid_signed_tags=$(git for-each-ref \
		--points-at "$BRANCH_NAME" \
		--format "$FORMAT_SCRIPT" \
		refs/tags/reviews | grep -c v || true \
	)

	if [[ "$valid_signed_tags" -lt "$min_count" ]]; then
		echo "Error: Failed to find enough signed review tags to satisfy minimum review requirement."
		echo "Error: $valid_signed_tags reviews were found, but $min_count are required"
		exit 1
	fi
}

cmd_version() {
	echo "$PROGRAM $VERSION"
}

main "$@"
